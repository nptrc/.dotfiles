{
  "example tasks.lua file": {
    "prefix": "tasks",
    "body": [
      "return {",
      "  $0",
      "}",
      "",
      "-- Available placeholders:",
      "--   \\${file}           -> absolute path to file",
      "--   \\${fileNoExt}      -> absolute path to file without extension",
      "--   \\${fileName}       -> only the file name",
      "--   \\${fileNameNoExt}  -> only the file name without extension",
      "--",
      "-- Task definitions:",
      "--   Each task is defined per filetype - ex: c = { build = \"gcc -o \\${file} \\${fileNoExt}\" }",
      "--   Each filetype can have its own mappings, if a task is not found for the current filetype, the 'all' tasks will be used.",
      "--     ft_mappings: table - Filetype mappings for tasks",
      "--     all: table - Tasks to run for all filetypes",
      "--   Tasks can be defined as simple strings (commands) or as tables with options.",
      "--   If a task is not found in the 'all' tasks, it will be skipped.",
      "--",
      "-- The following options are available:",
      "--   cmd: string (required) - The command to run",
      "--     if cmd start with '!', vim command will be run, example \"!e test.txt\" will be :e test.txt",
      "--   args: string - Additional arguments to pass to the command",
      "--   term: boolean - Whether to run the command in a terminal buffer, defaults to true",
      "--   desc: string - Description of the task",
      "--   prelaunch: string - Task to run before the main task"
    ],
    "description": "example tasks.lua file"
  },

  "example tasks for cmake": {
    "prefix": "t_cmake",
    "body": [
      "ft_mappings = {",
      "  c = \"cmake\",",
      "  cpp = \"cmake\",",
      "  h = \"cmake\",",
      "  hpp = \"cmake\",",
      "},",
      "cmake = {",
      "  generate = \"!CMakeGenerate\",",
      "  build = \"!CMakeBuild\",",
      "  run = \"!CMakeRunCurrentFile\",",
      "  run_2 = \"!CMakeRun\",",
      "  clean = \"!CMakeClean\",",
      "  debug = \"!CMakeDebug\",",
      "},"
    ],
    "description": "example tasks for cmake"
  },

  "example tasks for c": {
    "prefix": "t_c",
    "body": [
      "c = {",
      "  build = {",
      "    cmd = \"gcc -o \\${fileNoExt} \\${file}\",",
      "    args = \"-g\",",
      "  },",
      "  run = {",
      "    cmd = \"\\${fileNoExt}\",",
      "    prelaunch = \"build\",",
      "  },",
      "  clean = {",
      "    cmd = \"rm \\${fileNoExt}\",",
      "    term = false,",
      "  },",
      "},"
    ],
    "description": "example tasks for c"
  },

  "example tasks for c++": {
    "prefix": "t_cpp",
    "body": [
      "cpp = {",
      "  build = {",
      "    cmd = \"g++ -o \\${fileNoExt} \\${file}\",",
      "    args = \"-g\",",
      "  },",
      "  run = {",
      "    cmd = \"\\${fileNoExt}\",",
      "    prelaunch = \"build\",",
      "  },",
      "  clean = {",
      "    cmd = \"rm \\${fileNoExt}\",",
      "    term = false,",
      "  },",
      "},"
    ],
    "description": "example tasks for c++"
  },

  "example tasks for platformio": {
    "prefix": "t_platformio",
    "body": [
      "ft_mappings = {",
      "  c = \"pio\",",
      "  cpp = \"pio\",",
      "  h = \"pio\",",
      "  hpp = \"pio\",",
      "  ini = \"pio\",",
      "},",
      "pio = {",
      "  build = \"pio run\",",
      "  upload = \"pio run -t upload\",",
      "  monitor = \"pio device monitor\",",
      "  run = \"pio run -t upload -t monitor\",",
      "  compile_db = \"pio run -t compiledb\",",
      "  clean = \"pio run -t clean\",",
      "  home = {",
      "    cmd = \"pio home --shutdown-timeout 10\",",
      "    term = false,",
      "  },",
      "},"
    ],
    "description": "example tasks for platformio"
  }
}
